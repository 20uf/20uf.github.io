<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Michael COULLERET Blog</title>
    <subtitle></subtitle>
    <link href="https://20uf.github.io/feed/index.atom" rel="self" />
    <link href="https://20uf.github.io/" />
        <id>https://20uf.github.io/</id>
            <updated>2016-06-11T00:00:00+02:00</updated>
            <entry>
        <title>Les simplicités de conception</title>
                <id>https://20uf.github.io/2016/06/11/design-principles.html</id>
                <updated>2016-06-11T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2016/06/11/design-principles.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="les-simplicites-de-conception">Les simplicités de conception<a href="#les-simplicites-de-conception" class="anchor">#</a></h2>
<p>Il est important en tant que développeur de connaître les designs patterns, ils sont la pour résoudre les problèmes récurrents de conception, cependant il est tout aussi primordiale de les utiliser avec parcimonie.
Pour cette raison je tiens à rappeler des principes de simplicités à ne pas oublier. </p>
<h3 id="dry-don-t-repeat-yourself">DRY (Don’t repeat yourself)<a href="#dry-don-t-repeat-yourself" class="anchor">#</a></h3>
<p>Ne vous répétez pas.
A mon sens la répétition démontre un problème de découplage ou de conception, en effet les évolutions deviennent complexes et le risque de bug est augmenté considérablement.
Le respect du principe DRY doit permettre un code réutilisable, facile à maintenir et testable.</p>
<h3 id="yagni-you-ain-t-gonna-need-it">YAGNI (You ain't gonna need it)<a href="#yagni-you-ain-t-gonna-need-it" class="anchor">#</a></h3>
<p>Vous n'en aurez pas besoin.
On peut être dans des cas ou l'on souhaite anticipé une fonctionnalité, on rentre alors une inflation qui peut être contre-productif, difficile à maintenir ou bien on se retrouve avec du code mort.
Le principe YAGNI est de développer uniquement la fonctionnalité demandée sans surplus.</p>
<h3 id="kiss-keep-it-simple-stupid">KISS (Keep it simple, stupid)<a href="#kiss-keep-it-simple-stupid" class="anchor">#</a></h3>
<p>Ne complique pas les choses. Ou garde ça simple, idiot.
Ce principe est très proche de celui de YAGNI, une fonctionnalité ne nécessite pas forcement une complexité élevée, si par exemple l'utilisation d'un design pattern n'est pas requis pour le besoin, le principe KISS incite à écrire un code simple et stupide.</p>]]></content>
    </entry>
        <entry>
        <title>Optimisez votre front avec Symfony</title>
                <id>https://20uf.github.io/2016/05/09/optimize-front-with-symfony-(in-progress).html</id>
                <updated>2016-05-09T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2016/05/09/optimize-front-with-symfony-(in-progress).html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="optimisez-votre-front-avec-symfony">Optimisez votre front avec Symfony<a href="#optimisez-votre-front-avec-symfony" class="anchor">#</a></h2>
<p>Il faut installer uglify-js</p>
<pre><code>npm install uglify-js -g</code></pre>
<p>Ainsi que uglifycss:</p>
<pre><code>npm install uglifycss -g</code></pre>
<p>Dans votre fichier de configuration config.yml</p>
<pre><code>assetic:
    debug:          "%kernel.debug%"
    use_controller: '%kernel.debug%'
    bundles:        [ AppBundle ]
    ruby: /usr/local/bin/ruby
    filters:
        cssrewrite: ~
        sass:
            bin: /usr/local/bin/sass
        compass:
            bin: /usr/local/bin/compass
            cache_location: '%kernel.cache_dir%'
        uglifyjs:
            bin: /usr/bin/uglifyjs
        uglifycss:
            bin: /usr/bin/uglifycss</code></pre>
<ul><li>Documentations:
<ul><li><a href="http://symfony.com/doc/current/best_practices/web-assets.html">http://symfony.com/doc/current/best_practices/web-assets.html</a></li>
<li><a href="http://symfony.com/doc/current/cookbook/assetic/uglifyjs.html">http://symfony.com/doc/current/cookbook/assetic/uglifyjs.html</a></li>
<li><a href="http://symfony.com/doc/current/cookbook/assetic/uglifyjs.html">http://symfony.com/doc/current/cookbook/assetic/uglifyjs.html</a></li>
</ul></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Se simplifier la vie avec vos clefs ssh</title>
                <id>https://20uf.github.io/2016/05/03/Organize-your-ssh-keys.html</id>
                <updated>2016-05-03T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2016/05/03/Organize-your-ssh-keys.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="organisez-vos-clefs-ssh">Organisez vos clefs ssh<a href="#organisez-vos-clefs-ssh" class="anchor">#</a></h2>
<h4 id="generer-une-cle-privee-et-une-cle-publique">Générer une clé privée et une clé publique<a href="#generer-une-cle-privee-et-une-cle-publique" class="anchor">#</a></h4>
<p>Une clé SSH vous permet d'établir une connexion sécurisée entre votre ordinateur et un serveur.</p>
<p>Pour générer une nouvelle clé SSH, utilisez la commande suivante:</p>
<pre><code>ssh-keygen -t rsa -C "votre@email.com"</code></pre>
<p>Cette commande vous demandera un emplacement et un nom pour stocker la paire de clés et un mot de passe.
Je conseille d'utiliser l'emplacement par defaut correspondant et de nommer votre clé selon son utilité, par exemple pour github </p>
<pre><code>~/.ssh/id_github</code></pre>
<p>Une seconde question vous demande un passphrase, il est fortement recommandé d'en utiliser un</p>
<pre><code>Enter passphrase (empty for no passphrase): **************</code></pre>
<p>Vous devriez avoir un retour de ce type:</p>
<pre><code>Your identification has been saved in /home/demo/.ssh/id_rsa.
Your public key has been saved in /home/demo/.ssh/id_rsa.pub.
The key fingerprint is:
4a:dd:0a:c6:35:4e:3f:ed:27:38:8c:74:44:4d:93:67 demo@a
The key's randomart image is:
+--[ RSA 2048]----+
|          .oo.   |
|         .  o.E  |
|        + .  o   |
|     . = = .     |
|      = S = .    |
|     o + = +     |
|      . o + o .  |
|           . o   |
|                 |
+-----------------+</code></pre>
<p>Votre clé est maintenant générée et prête à defaut utilisée.</p>
<p>Si vous souhaitez copier votre clé sur un serveur distant, vous pouvez procéder ainsi:</p>
<pre><code>cat ~/.ssh/id_rsa.pub | ssh user@host "mkdir -p ~/.ssh && cat >>  ~/.ssh/authorized_keys"</code></pre>
<p>Une fois que vous avez copié vos clés SSH vers votre serveur, vérifier que vous pouvez vous connecter avec les clés SSH:</p>
<pre><code>ssh user@host</code></pre>
<h4 id="configurer-ses-cles">Configurer ses clés<a href="#configurer-ses-cles" class="anchor">#</a></h4>
<p>Une astuce pour se simplifier la vie avec vos clefs ssh, creez un fichier dans la dossier .ssh :</p>
<pre><code>vim ~/.ssh/config</code></pre>
<p>Créez une configuration differentes pour chaque serveurs ssh:</p>
<pre><code>Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa

Host gitlab.domain.fr
    HostName gitlab.domain.fr
    User git
    IdentityFile ~/.ssh/id_other_rsa</code></pre>
<p>Et le tour est joué !</p>
<h4 id="quelques-options">Quelques options:<a href="#quelques-options" class="anchor">#</a></h4>
<table><thead><tr><th style="text-align: left;">Commande</th>
<th style="text-align: center;">Paramètre</th>
<th style="text-align: right;">Description</th>
</tr></thead><tbody><tr><td style="text-align: left;"><code>hote</code></td>
<td style="text-align: center;">hostname/ip</td>
<td style="text-align: right;">adresse de la machine</td>
</tr><tr><td style="text-align: left;"><code>RSAAuthentication</code></td>
<td style="text-align: center;">yes/no</td>
<td style="text-align: right;">authentification RSA, clé publique/privé généré avec "ssh-keygen"</td>
</tr><tr><td style="text-align: left;"><code>PubKeyAuthentication</code></td>
<td style="text-align: center;">yes/no</td>
<td style="text-align: right;">s'authentifier avec une clé public</td>
</tr><tr><td style="text-align: left;"><code>PasswordAuthentication</code></td>
<td style="text-align: center;">yes/no</td>
<td style="text-align: right;">authentification avec mot de passe (a pas confondre avec passphrase)</td>
</tr><tr><td style="text-align: left;"><code>CheckHostIP</code></td>
<td style="text-align: center;">yes/no</td>
<td style="text-align: right;">Verifie l'IP host n'est pas une usurpation DNS</td>
</tr><tr><td style="text-align: left;"><code>IdentityFile</code></td>
<td style="text-align: center;">~/.ssh/id_dsa</td>
<td style="text-align: right;">défini la clé privé a utiliser pour s'authentifier</td>
</tr><tr><td style="text-align: left;"><code>User</code></td>
<td style="text-align: center;">user</td>
<td style="text-align: right;">compte à utiliser pour l'identification</td>
</tr><tr><td style="text-align: left;"><code>Port</code></td>
<td style="text-align: center;">port</td>
<td style="text-align: right;">numéro de port à utiliser</td>
</tr><tr><td style="text-align: left;"><code>HashKnownHosts</code></td>
<td style="text-align: center;">yes/no</td>
<td style="text-align: right;">Permet d'avoir un fichier known_hosts plus lisible</td>
</tr></tbody></table><h4 id="securite-sur-votre-serveur-ssh">Sécurité sur votre serveur SSH<a href="#securite-sur-votre-serveur-ssh" class="anchor">#</a></h4>
<p>Le login root ne doit pas être autorisée par l'intermédiaire des clés SSH.</p>
<p>Pour ce faire, ouvrez le fichier SSH config sur votre serveur distant:</p>
<pre><code>vim /etc/ssh/sshd_config</code></pre>
<p>Dans ce fichier, trouvez la ligne qui comprend PermitRootLogin et modifiez le pour garantir que seuls les utilisateurs peuvent se connecter avec leur clé SSH:
PermitRootLogin sans mot de passe</p>
<pre><code>PermitRootLogin without-password</code></pre>
<p>Mettez les changements en vigueur:</p>
<pre><code>reload ssh</code></pre>]]></content>
    </entry>
        <entry>
        <title>Le coding standard Symfony2 avec CodeSniffer et PHPStorm</title>
                <id>https://20uf.github.io/2016/04/21/Coding-standard-phpstorm.html</id>
                <updated>2016-04-21T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2016/04/21/Coding-standard-phpstorm.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="un-point-important-concernant-la-qualite-de-code">Un point important concernant la qualité de code<a href="#un-point-important-concernant-la-qualite-de-code" class="anchor">#</a></h2>
<p>Pour s'assurer de la normalisation des projets, l'installation d'outil comme PHP <a href="http://pear.php.net/package/PHP_CodeSniffer">PHP_CodeSniffer</a> facilite le respect des conventions de codage.</p>
<pre><code>sudo pear install PHP_CodeSniffer</code></pre>
<p>CodeSniffer inclut 8 standards par defaut: PSR2, Squiz, Zend, MySource, PHPCS, PSR1 and PEAR.
Nous allons ajouter le standard de Symfony2.</p>
<pre><code>git clone git://github.com/escapestudios/Symfony2-coding-standard.git /tmp/Symfony2-coding-standard
sudo cp -r /tmp/Symfony2-coding-standard/Symfony2 /usr/share/php/PHP/CodeSniffer/Standards/</code></pre>
<p>Le standart doit maintenant exister dans la liste:</p>
<pre><code>phpcs -i</code></pre>
<p>Nous pouvons en définir un par défaut:</p>
<pre><code>sudo phpcs --config-set default_standard Symfony2</code></pre>
<p>Pour l'utiliser il suffit à de se rendre dans un de nos projets Symfony2 et de taper la commande suivante :</p>
<pre><code>phpcs src/</code></pre>
<h2 id="configuration-dans-phpstorm">Configuration dans PHPStorm<a href="#configuration-dans-phpstorm" class="anchor">#</a></h2>
<p>Allez dans File > Settings > Languages & Frameworks > PHP > Code Sniffer  </p>
<p>Indiquez dans l'executable phpcs puis validez !</p>
<p><img src="/img/1_phpstorm_codesniffer.png" alt="CodeSniffer"></p>
<p>Dernier point à finaliser, l'inspection:
File > Settings > Editor > Code Style > Inspections > PHP > PHP Code Sniffer validation</p>
<p>Activez le et mettez la sévérité forte.</p>
<p><img src="/img/2_phpstorm_setting_inspections.png" alt="Inspection"></p>]]></content>
    </entry>
        <entry>
        <title>Les outils indispensables d&#039;un développeur</title>
                <id>https://20uf.github.io/2015/12/12/developer-tools.html</id>
                <updated>2015-12-12T00:00:00+01:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2015/12/12/developer-tools.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="quels-sont-les-outils-indispensables-d-un-developpeur">Quels sont les outils indispensables d'un développeur<a href="#quels-sont-les-outils-indispensables-d-un-developpeur" class="anchor">#</a></h2>
<p>En tant que développeur, on doit s'assurer de disposer sur son poste de travail des outils suivants :</p>
<ul><li>
<p>PHP</p>
<ul><li><a href="https://getcomposer.org/">Composer</a> pour gérer les dépendances</li>
<li><a href="http://www.phpunit.de">PHPUnit</a> pour écrire mes tests unitaires</li>
<li><a href="http://www.behat.org">Behat</a> pour écrire mes tests fonctionnels</li>
<li><a href="http://www.phpmetrics.org">PhpMetrics</a> pour vérifier la qualité de mon code</li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP Code Sniffer</a> pour regarder si je respecte bien les conventions de code</li>
</ul></li>
<li>
<p>JavaScript</p>
<ul><li><a href="http://jasmine.github.io">Jasmine</a></li>
<li><a href="http://jasmine.github.io">Jasmine Species</a> et <a href="http://www.behat.org">Behat</a> pour écrire mes tests fonctionnels</li>
<li><a href="https://github.com/es-analysis/plato">Plato</a> pour vérifier la qualité de mon code</li>
<li><a href="http://www.jslint.com/">JSLint</a> pour regarder si je respecte bien les conventions de code</li>
<li><a href="https://nodejs.org/">NodeJs</a> est une plateforme de développement Javascript</li>
<li><a href="http://bower.io/">Bower</a> pour gérer les librairies</li>
<li><a href="http://gruntjs.com/">GruntJs</a> est un gestionnaire de tâches (automatisation)</li>
</ul></li>
<li>Css
<ul><li><a href="http://sass-lang.com/">Sass</a> est un préprocesseur css</li>
<li><a href="http://compass-style.org/">Compass</a> est un framework css</li>
</ul></li>
</ul><p>Les projects incontournables:</p>
<ul><li><a href="https://symfony.com/">Symfony</a> est un ensemble de composant formant un framework PHP</li>
<li><a href="http://yeoman.io/">Yeoman</a> est un composant qui va exécuter des générateurs</li>
</ul>]]></content>
    </entry>
        <entry>
        <title>installer PHP 7 pour apache avec les dépôts dotdeb</title>
                <id>https://20uf.github.io/2015/06/20/debian-install-PHP7.html</id>
                <updated>2015-06-20T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2015/06/20/debian-install-PHP7.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="installer-php-7-pour-apache-avec-les-depots-dotdeb">installer PHP 7 pour apache avec les dépôts dotdeb <a href="#installer-php-7-pour-apache-avec-les-depots-dotdeb" class="anchor">#</a></h2>
<p>Ajouter les dépots dotdeb:</p>
<pre><code> echo "deb http://packages.dotdeb.org jessie all" > /etc/apt/sources.list.d/dotdeb.list
 wget https://www.dotdeb.org/dotdeb.gpg && apt-key add dotdeb.gpg</code></pre>
<p>Mettre à jour les dépots</p>
<pre><code> apt-get update && apt-get upgrade</code></pre>
<p>Vérification de la présence de php7: </p>
<pre><code>apt-cache policy php7.0</code></pre>
<p>Si vous migrez à partir de php5, nettoyez les paquets:</p>
<pre><code>apt-get --purge remove php5* && apt-get autoremove</code></pre>
<p>On installe PHP7 & FPM</p>
<pre><code>apt install php7.0 php7.0-fpm</code></pre>
<p>On contrôle la version:</p>
<pre><code>php -v

> PHP 7.0.7-4+deb.sury.org~trusty+1 (cli) ( NTS )
> Copyright (c) 1997-2016 The PHP Group
> Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies
> with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies</code></pre>
<p>Configuration</p>
<h5 id=""><a href="#" class="anchor">#</a></h5>
<p>On modifie le php.ini:</p>
<pre><code>vim /etc/php/7.0/fpm/php.ini</code></pre>
<p>Ligne 768:</p>
<pre><code>cgi.fix_pathinfo=0</code></pre>
<p>Ligne 798:</p>
<pre><code>upload_max_filesize = 32M</code></pre>
<p>Ligne 656:</p>
<pre><code>post_max_size = 32M</code></pre>
<p>Ligne 912:</p>
<pre><code>date.timezone = Europe/Paris</code></pre>
<p>Ligne 1306:</p>
<pre><code>session.save_path = "/tmp"</code></pre>
<p>On modifie www.conf</p>
<pre><code>vim /etc/php/7.0/fpm/pool.d/www.conf</code></pre>
<p>Ligne 37</p>
<pre><code>listen = /run/php/php7.0-fpm.sock</code></pre>
<p>par:</p>
<pre><code>listen = 127.0.0.1:9000</code></pre>
<p>On installe les modules supplémentaire:</p>
<pre><code>apt-get install php7.0-gd php7.0-cli php7.0-mysql php7.0-common php7.0-curl php7.0-opcache php7.0-json php-xml php-xdebug php7.0-mbstring</code></pre>
<p>apt-get install libapache2-mod-php7.0 php7.0 php7.0-cli php7.0-common php7.0-curl php7.0-dev php7.0-fpm php7.0-gd php7.0-intl php7.0-json php7.0-mcrypt php7.0-memcache php7.0-memcached php7.0-mysql php7.0-readline php7.0-tidy</p>
<p>On relance les services:</p>
<pre><code>service apache2 restart && service php7.0-fpm restart</code></pre>]]></content>
    </entry>
    </feed>
