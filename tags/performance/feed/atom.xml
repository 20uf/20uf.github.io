<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Michael COULLERET Blog</title>
    <subtitle></subtitle>
    <link href="https://20uf.github.io/feed/index.atom" rel="self" />
    <link href="https://20uf.github.io/" />
        <id>https://20uf.github.io/</id>
            <updated>2017-12-28T00:00:00+01:00</updated>
            <entry>
        <title>Utilisez docker pour simplifier votre vie!</title>
                <id>https://20uf.github.io/2017/12/28/Use-docker-to-simplify-your-life.html</id>
                <updated>2017-12-28T00:00:00+01:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2017/12/28/Use-docker-to-simplify-your-life.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="utilisez-docker-pour-simplifier-votre-vie">Utilisez docker pour simplifier votre vie!<a href="#utilisez-docker-pour-simplifier-votre-vie" class="anchor">#</a></h2>
<h4 id="pourquoi-s-orienter-sur-du-docker">Pourquoi s'orienter sur du docker.<a href="#pourquoi-s-orienter-sur-du-docker" class="anchor">#</a></h4>
<p>Dans le cadre de mes projets j'ai &eacute;t&eacute; confront&eacute; &agrave; ce que chacun de mes d&eacute;veloppeurs se retrouvent avec des configurations diff&eacute;rentes sur leur poste de travail. </p>
<p>Selon les projets cette pratique peut &ecirc;tre probl&eacute;matique, par exemple nous avons application centrale qui permet l'authentification entre plusieurs produits et qui exploitent du <a href="https://fr.wikipedia.org/wiki/Authentification_unique">SSO</a>.
La contrainte principale est le partage de session, les vhosts doivent &ecirc;tre identiques ainsi que la configuration applicative.</p>
<p>A mon sens &ccedil;a rend le projet complexe, il faut comprendre comment fonctionne le produit et les techniques utilis&eacute;es, il faut appr&eacute;hender et cela prend du temps.</p>
<p>La mise en oeuvre de <a href="https://www.docker.com/">Docker</a> nous apporte les avantages suivants:</p>
<ul><li>L'installation d'un projet ne prend que quelque minutes, pr&ecirc;t au developpement.</li>
<li>La stack entre chaque d&eacute;veloppeurs est ISO</li>
<li>Le poste du d&eacute;veloppeur n&eacute;ccessite que cinq outils:
<ul><li><a href="https://www.docker.com/">Docker</a></li>
<li><a href="https://docs.docker.com/compose/">Docker-compose</a></li>
<li><a href="https://git-scm.com/">Git</a></li>
<li><a href="https://www.gnu.org/software/make/">Make</a></li>
<li><a href="https://www.jetbrains.com/phpstorm/">Un IDE</a></li>
</ul></li>
</ul><h4 id="quelle-approche-aborder">Quelle approche aborder ?<a href="#quelle-approche-aborder" class="anchor">#</a></h4>
<p>La philosophie de <a href="https://www.docker.com/">Docker</a> est de lancer un processus par conteneur. </p>
<p>En tant que d&eacute;veloppeur je pr&eacute;f&egrave;re avoir une approche diff&eacute;rente, par services.</p>
<p>Je connais mon silo, &agrave; savoir:</p>
<ul><li>Un clusteur Apache / Nginx et PHP-x</li>
<li>Un clusteur Mysql / MariaDb / MongoDb..</li>
<li>Un clusteur Memcache / Redis..</li>
</ul><p>Mon objectif est de s'approcher au maximum de cet environnement.</p>
<p><img src="/img/1_silo_docker.png" alt="Silo"></p>
<p>Pour cela je vais utiliser <a href="https://docs.docker.com/compose/">Docker-compose</a> et <a href="https://www.gnu.org/software/make/">Make</a> pour simplifier la gestion:</p>
<ul><li>Installer le projet</li>
<li>Lancer les containers</li>
<li>Arr&ecirc;ter les containers</li>
<li>Manipuler un container (lancer des t&acirc;ches par exemple)</li>
</ul><p>Ma pratique est d'avoir un package <code>Docker</code> &agrave; la racine de mes projets, on peut y placer des <code>Dockerfile</code> qui peuvent &ecirc;tre construites &agrave; la demande.</p>
<p>Cependant je pr&eacute;f&egrave;re construire mes images en amont afin d'&eacute;conomiser le temps de construction &agrave; chaque installation. </p>
<p>Nous avons (mon &eacute;quipe) cr&eacute;&eacute; un d&eacute;p&ocirc;t <a href="https://github.com/OsLab/docker-php-nginx">docker-php-nginx</a> qui contient une s&eacute;rie d'images, cela nous permet de pouvoir switcher facilement et simplement sur l'une d'elle.
Ces images repr&eacute;sentes la partie serveur web avec son langage (PHP) et des configurations adapt&eacute;es &agrave; nos besoins.</p>
<p>Voici la liste des images actuellement disponibles sous Debian Stetch (9):</p>
<p>PHP 7.2:</p>
<pre><code class="language-yaml">  dockerphp/nginx:7.2-stretch </code></pre>
<p>PHP 7.1:</p>
<pre><code class="language-yaml">  dockerphp/nginx:7.1-stretch</code></pre>
<p>PHP 7.0:</p>
<pre><code class="language-yaml">  dockerphp/nginx:7.0-stretch</code></pre>
<p>Il existe une version PHP 5.6 sous debian Jessie (8):</p>
<pre><code class="language-yaml">  dockerphp/nginx:5.6-jessie</code></pre>
<blockquote>
<p>Des images Alpines seront prochainement ajout&eacute;es.</p>
</blockquote>
<h4 id="mise-en-place-du-silo">Mise en place du Silo<a href="#mise-en-place-du-silo" class="anchor">#</a></h4>
<p>Nos produits sont d&eacute;velopp&eacute;s sous Symfony, nos exemples sont donc bas&eacute;s dessus, vous pouvez bien &eacute;videmment reproduire pour tout autre type de Framework ou pas.</p>
<p>Notre fichier docker <code>docker-compose.yml</code> se trouvant &agrave; la racine du projet.</p>
<p>Je vous invite &agrave; consulter la <a href="https://docs.docker.com/compose/compose-file/">documentation officielle</a> concernant l'utilisation et les r&eacute;f&eacute;rences.</p>
<pre><code class="language-yaml">version: "2"

services:
    app:
        image: dockerphp/nginx:7.2-stretch
        depends_on:
            - db
            - memcached_1
            - memcached_2
        volumes:
            - .:/app
        ports:
            - "8080:443"
        extra_hosts:
         - "sso.domain-dev.fr:172.17.0.1" # L'ip du docker engine

    db:
        image: mariadb:10.3
        environment:
            v: root
        ports:
            - "3301:3306"

    memcached_1:
        image: memcached:latest
        mem_limit: 1g

    memcached_2:
        image: memcached:latest
        mem_limit: 1g

    pma:
        image: phpmyadmin/phpmyadmin
        depends_on:
            - db
        environment:
            PMA_HOST: db
            PMA_USER: root
            PMA_PASSWORD: root
        ports:
            - "127.0.0.1:8081:80"</code></pre>
<p>D&eacute;taillons un peu cette configuration:</p>
<p><code>app</code>: </p>
<ul><li>Nous chargeons l'image avec Nginx et PHP 7.1.</li>
<li>Nous avons trois liens, un sur la base de donn&eacute;es et deux sur memcached.</li>
<li>le port 80 du container sera accessible sur le port 8080. (<a href="https://localhost:8080">https://localhost:8080</a>)</li>
<li>Nous ajoutons dans le <code>/etc/hosts</code> le domaine <code>sso.domain-dev.fr</code> sur l'ip du docker engine.</li>
</ul><p><code>db</code>: </p>
<ul><li>Nous chargeons l'image officielle de mariadb sur la version 10.3.
_ On d&eacute;clare avec la variable d'environnement <code>MYSQL_ROOT_PASSWORD</code> le mot de passe <code>root</code>.</li>
<li>le port 3306 du container sera accessible sur le port 3301.</li>
</ul><p><code>memcached_1</code> et <code>memcached_2</code>: </p>
<ul><li>Nous chargeons l'image officielle de memcached sur sa derni&egrave;re version.</li>
<li>On assigne 1g de m&eacute;moire &agrave; memcached .</li>
<li>le port 11211 du container sera accessible sur le port 11210 et 11211.</li>
</ul><p><code>pma</code>: </p>
<ul><li>Nous chargeons l'image officielle de phpmyadmin sur sa derni&egrave;re version.</li>
<li>Nous avons un lien avec la base de donn&eacute;es.</li>
<li>On d&eacute;clare avec les variables d'environnements pour que phpmyadmin se connecte &agrave; la base de donn&eacute;es.</li>
<li>le port 80 du container sera accessible sur le port 8081. (<a href="http://localhost:8081">http://localhost:8081</a>)</li>
</ul><p>Nous allons maintenant cr&eacute;er un fichier <code>Makefile</code> &agrave; la racine du projet, celui-ci va nous simplifier la vie pour manipuler les containers.</p>
<pre><code class="language-bash"># Do not change
DC=docker-compose
EXEC=$(DC) exec app
CONSOLE=bin/console

.DEFAULT_GOAL := help
.PHONY: help start stop restart clear cc bash host deps

help:
    @echo ''
    @fgrep -h "##" $(MAKEFILE_LIST) | fgrep -v fgrep | sed -e 's/\\$$//' | sed -e 's/##//'
    @echo ''

## Setup
##---------------------------------------------------------------------------
install:        ## Install and start the project
install: up vendor app/config/parameters.yml yarn info

host:           ## Add the application host to your configuration
    @echo 'Adding the local domain to /etc/hosts'
    sudo sh -c  'echo "127.0.0.1       my-app.domain-dev.fr" &gt;&gt; /etc/hosts'

##
## Provisioning
##---------------------------------------------------------------------------
start:          ## start the project
start: up info

stop:           ## Stop docker containers
    $(DC) kill

restart:        ## Restart the whole project
restart: stop start warmup

bash:           ## Switch to the bash container of the application
    @$(EXEC) bash

##
## Symfony
##---------------------------------------------------------------------------
clear:          ## Remove all the cache, the logs, the sessions and the built assets
clear: warmup

cc:             ## Clear the cache in dev env
cc:
    $(EXEC) $(CONSOLE) cache:clear --no-warmup

clean:          ## Clean package nodejs
clean: clean_project

console:        ## Launch Console
    $(CONSOLE) $(filter-out $@,$(MAKECMDGOALS))

composer:       ## Launch Composer
    $(EXEC) composer $(filter-out $@,$(MAKECMDGOALS))

##
## Dependencies
##---------------------------------------------------------------------------

deps:           ## Install the project PHP and JS dependencies
deps: vendor

# Internal rules

up:
    $(DC) up -d --remove-orphans

vendor: composer.lock
    @$(EXEC) composer install

composer.lock: composer.json
    @echo compose.lock is not up to date.

app/config/parameters.yml: app/config/parameters.yml.dist
    @$(EXEC) composer run-script post-install-cmd --no-interaction

node_modules: yarn.lock
    @$(RUN) yarn run assets

yarn:
    -$(EXEC) npm run yarn:assets

yarn.lock: package.json
    @echo yarn.lock is not up to date.

%:
@:</code></pre>
<p>Vous remarquez qu'il est assez simple d'ajouter de nouvelles t&acirc;ches.</p>
<p>Vous pouvez maintenant consulter les t&acirc;ches disponibles avec la commande:</p>
<pre><code>$ make</code></pre>
<p>Vous aurez pour r&eacute;sultat:</p>
<pre><code class="language-bash"> Setup
---------------------------------------------------------------------------
install:         Install and start the project
host:            Add the application host to your configuration

 Provisioning
---------------------------------------------------------------------------
start:           start the project
stop:            Stop docker containers
restart:         Restart the whole project
bash:            Switch to the bash App container of the application

 Cache
---------------------------------------------------------------------------
clear:           Remove all the cache, the logs, the sessions and the built assets
cc:              Clear the cache in dev env
clean:           Clean package nodejs

 Dependencies
---------------------------------------------------------------------------
deps:            Install the project PHP and JS dependencies</code></pre>
<p>Vous l'aurez compris, maintenant l'installation d'un projet semble simple et rapide, voici en quelques lignes ce que repr&eacute;sentent l'installation d'un projet:</p>
<pre><code>$ git clone git@gitlab.entreprise.com:namespace/project_name.git
Cloning into 'project_name'...
remote: Counting objects: 22512, done.
....
$ make install
cd project_name/ &amp;&amp; make install
docker-compose up -d --remove-orphans
Creating network "project_name_default" with the default driver
Pulling memcached (memcached:latest)...
latest: Pulling from library/memcached
94ed0c431eb5: Pull complete
...
7.2-stretch: Pulling from dockerphp/nginx
...</code></pre>
<p>Une fois termin&eacute;e vous pouvez acceder:</p>
<ul><li>A votre application sur <a href="https://my-app.domain-dev.fr:8080">https://my-app.domain-dev.fr:8080</a></li>
<li>PhpMyAdmin sur <a href="http://my-app.domain-dev.fr:8081">http://my-app.domain-dev.fr:8081</a></li>
<li>Mysql sur le port 3301 si vous utilisez MysqlWorkbench.</li>
</ul><h4 id="la-surcharge-des-configurations">La surcharge des configurations<a href="#la-surcharge-des-configurations" class="anchor">#</a></h4>
<p>Jusqu'ici nous avons mis en place notre stack, cependant nous avons besoin de surcharger la configuration de PHP, ou encore celle de Nginx.</p>
<p>Rien de plus simple! Il suffit de monter le ou les fichiers de configuration dans nos volumes !</p>
<pre><code class="language-yaml">services:
    app:
        image: dockerphp/nginx:7.2-stretch
        volumes:
            - .:/app
            - ./docker/nginx.conf:/etc/nginx/nginx.conf
            - ./docker/php.ini:/etc/php5/fpm/php.ini</code></pre>
<p>Rappelez-vous nous avions d&eacute;cid&eacute; en d&eacute;but de cet article cr&eacute;er un package <code>docker</code> &agrave; la racine de notre projet, nous allons y placer deux fichiers:</p>
<ul><li>php.ini</li>
<li>nginx.conf</li>
</ul><blockquote>
<p>Vous pouvez trouver les configurations de base sur le <a href="https://github.com/OsLab/docker-php-nginx/tree/master/image/config">d&eacute;p&ocirc;t officiel</a>, les exemples ci-dessous sont d&eacute;monstratifs.</p>
</blockquote>
<p>Surcharger <code>php.ini</code> pour ajouter l'&eacute;criture des sessions dans memcached.</p>
<pre><code>; Add here the parameters that you want to override

short_open_tag = Off
date.timezone = Europe/Paris
error_log = /proc/self/fd/2
upload_max_filesize = 10M
post_max_size = 10M
memory_limit=1024M

; https://symfony.com/doc/3.4/performance.html
opcache.max_accelerated_files = 20000
realpath_cache_size=4096K
realpath_cache_ttl=600

; xdebug
xdebug.remote_enable=on
xdebug.remote_autostart=off
xdebug.remote_port=9000
xdebug.remote_handler=dbgp
xdebug.remote_connect_back=0

;session.save_handler=memcached
memcached session.save_path = 'tcp://memcached_1:11211,tcp://memcached_2:11211'</code></pre>
<p>Surcharger <code>nginx.conf</code> pour changer le dossier public ou le vhost par exemple.</p>
<pre><code>daemon off;
user www-data;
worker_processes 5;
pid /run/nginx.pid;

error_log /dev/stdout info;

events {
    worker_connections 1024;
}

http {
    access_log /dev/stdout;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    types {
        font/woff2 woff2;
    }
    client_max_body_size 10M;

    ##
    # Virtual Host Configs
    ##

    server {
        listen 443 ssl;
        server_name oslab.demo.net;

        ssl on;
        ssl_certificate /etc/ssl/nginx/nginx.crt;
        ssl_certificate_key /etc/ssl/nginx/nginx.key;

        root /app/public;
        index index.php;

        location / {
            try_files $uri /index.php$is_args$args;
        }

        location ~ \.php(/|$) {
            internal;

            fastcgi_pass 127.0.0.1:9000;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param SYMFONY_ENV dev;
            fastcgi_param HTTPS on;

            fastcgi_buffers 16 16k;
            fastcgi_buffer_size 32k;
        }
    }
}</code></pre>
<p>Pensez a relancer vos conteneurs pour que les modifications prennent effets.</p>
<p>Vous en pensez quoi ? Pas mal hein ? :)</p>]]></content>
    </entry>
        <entry>
        <title>Installer Docker et Docker-Compose</title>
                <id>https://20uf.github.io/2017/12/02/Install-docker-and-docker-compose.html</id>
                <updated>2017-12-02T00:00:00+01:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2017/12/02/Install-docker-and-docker-compose.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="installation-de-docker-et-docker-compose">Installation de docker et docker-compose<a href="#installation-de-docker-et-docker-compose" class="anchor">#</a></h2>
<p>Petit cheatsheet pour l'installation de Docker sur Mint ou Ubuntu xenial.</p>
<p>On ajoute la clef et le d&eacute;p&ocirc;t:</p>
<pre><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo su
* apt-key fingerprint 0EBFCD88
$ add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"</code></pre>
<p>On met &agrave; jour.</p>
<pre><code>$ apt update</code></pre>
<p>On recherche le paquets <code>docker-ce</code>.</p>
<pre><code>$ apt-cache madison docker-ce</code></pre>
<pre><code class="language-bash">    docker-ce | 17.12.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages
    docker-ce | 17.09.1~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages
    docker-ce | 17.09.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages
    docker-ce | 17.06.2~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages
    docker-ce | 17.06.1~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages
    docker-ce | 17.06.0~ce-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages
    docker-ce | 17.03.2~ce-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages
    docker-ce | 17.03.1~ce-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages
    docker-ce | 17.03.0~ce-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages</code></pre>
<p>On installe la derni&egrave;re version.</p>
<pre><code>$ apt-get update docker-ce=17.12.0~ce-0~ubuntu</code></pre>
<p>On v&eacute;rifie que l'installation est correcte.</p>
<pre><code>$ docker version</code></pre>
<pre><code class="language-bash">Client:
 Version:   17.12.0-ce
 API version:   1.35
 Go version:    go1.9.2
 Git commit:    c97c6d6
 Built: Wed Dec 27 20:11:19 2017
 OS/Arch:   linux/amd64

Server:
 Engine:
  Version:  17.12.0-ce
  API version:  1.35 (minimum version 1.12)
  Go version:   go1.9.2
  Git commit:   c97c6d6
  Built:    Wed Dec 27 20:09:53 2017
  OS/Arch:  linux/amd64
  Experimental: false</code></pre>
<p>On installe Docker-compose</p>
<pre><code>$ apt install docker-compose</code></pre>
<pre><code class="language-bash">    docker-compose version 1.8.0, build unknown
    docker-py version: 1.9.0
    CPython version: 2.7.12
    OpenSSL version: OpenSSL 1.0.2k  26 Jan 2017</code></pre>]]></content>
    </entry>
        <entry>
        <title>Optimiser son CLI PHP en désactivant XDEBUG</title>
                <id>https://20uf.github.io/2017/08/23/Optimize-PHP-CLI-by-disabling -XDEBUG.html</id>
                <updated>2017-08-23T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2017/08/23/Optimize-PHP-CLI-by-disabling -XDEBUG.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="optimiser-son-cli-php-en-desactivant-xdebug">Optimiser son CLI PHP en d&eacute;sactivant XDEBUG<a href="#optimiser-son-cli-php-en-desactivant-xdebug" class="anchor">#</a></h2>
<p><a href="https://xdebug.org/">Xdebug</a> est un outil incontournable, mais il peut &ecirc;tre p&eacute;nalisant lorsqu'on lance un composer, ou quelconques taches en CLI.</p>
<p>Jusqu'&agrave; aujourd'hui je le gardais activ&eacute; n'ayant pas de solution lors de mes utilisations du coverage de PHPunit, celui-ci &eacute;tant requis.</p>
<p>Bon c'est vrai je n'avais pas sp&eacute;cialement creus&eacute; le sujet.. souvent pris par d'autres priorit&eacute;s. </p>
<p>Mais maintenant c'est fini ! Je me suis d&eacute;cid&eacute; d'arr&ecirc;ter de n&eacute;gliger ce point, xdebug &agrave; des effets de ralentissement sur mes pipelines CI.</p>
<p>Allez on attaque le sujet :)</p>
<p>On commence par d&eacute;sactiver xdebug en mode CLI:</p>
<p>Pour PHP5:</p>
<pre><code>$ php5dismod -s cli xdebug</code></pre>
<p>Pour PHP7</p>
<pre><code>$ phpdismod -s cli xdebug</code></pre>
<p>Et hop d&eacute;j&agrave; on souffle, maintenant il reste &agrave; lancer une commande en activant xdebug:</p>
<pre><code>$ /usr/bin/php -dzend_extension=xdebug.so -dxdebug.remote_enable=1 &lt;votre commande&gt;</code></pre>
<p>On peut se simplifier la vie avec un alias:</p>
<pre><code>$ alias php-xdebug='/usr/bin/php -dzend_extension=xdebug.so -dxdebug.remote_enable=1'</code></pre>
<p>Je vous conseille d'ajouter directement la ligne ci-dessus dans le <code>.bashrc</code></p>
<pre><code>$ vim ~/.bashrc</code></pre>
<p>C'est parfois si simple.. la preuve !</p>
<pre><code>$ php-xdebug vendor/bin/phpunit --coverage-html build/
PHPUnit 5.7.21 by Sebastian Bergmann and contributors.

...............................................................  63 / 110 ( 57%)
...............................................                 110 / 110 (100%)

Time: 7.79 seconds, Memory: 35.75MB

OK (110 tests, 162 assertions)</code></pre>]]></content>
    </entry>
        <entry>
        <title>Déployer Symfony avec jenkins et capifony 2</title>
                <id>https://20uf.github.io/2016/08/25/Deploiement-with-jenkins-and-capistrano.html</id>
                <updated>2016-08-25T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2016/08/25/Deploiement-with-jenkins-and-capistrano.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="deployer-symfony-avec-jenkins-et-capifony-2">D&eacute;ployer Symfony avec jenkins et capifony 2<a href="#deployer-symfony-avec-jenkins-et-capifony-2" class="anchor">#</a></h2>
<blockquote>
<p>Ce guide n'explique pas comment installer Jenkins, vous devez disposer d'un serveur d&eacute;j&agrave; install&eacute; et configur&eacute;.</p>
</blockquote>
<h4 id="installer-capifony">Installer Capifony<a href="#installer-capifony" class="anchor">#</a></h4>
<p>Connectez-vous en SSH sur votre serveur Jenkins et installez les d&eacute;pendances suivantes:</p>
<blockquote>
<p>Installons aussi sur notre machine afin de d&eacute;boguer et tester nos scripts.</p>
</blockquote>
<p>Ruby 2:</p>
<pre><code>sudo apt-add-repository ppa:brightbox/ruby-ng
sudo apt-get update
sudo apt-get install ruby2.2 ruby2.2-dev</code></pre>
<p>Capifony</p>
<pre><code>gem install capifony
gem install capistrano-ext</code></pre>
<p>Il peut &ecirc;tre n&eacute;cessaire d'effectuer des t&acirc;ches sur le serveur Jenkins, comme par exemple les d&eacute;pendances bowers.</p>
<p>Pour cela j'utilise une d&eacute;pendance capistrano pour effectuer des t&acirc;ches avant la compression <a href="https://github.com/facile-it/capistrano-strategy-copy-with-triggers">Copy with triggers</a></p>
<pre><code>gem install 'capistrano-strategy-copy-with-triggers'</code></pre>
<h4 id="script-de-deploiement">Script de d&eacute;ploiement<a href="#script-de-deploiement" class="anchor">#</a></h4>
<blockquote>
<p>La bonne pratique est de cr&eacute;er un d&eacute;p&ocirc;t sp&eacute;cifique qui contient vos scripts.</p>
</blockquote>
<p>Nous allons ici nous concentrer sur l'environnement de production, vous pourrez reproduire la m&ecirc;me proc&eacute;dure pour les autres stagings.
Cr&eacute;ons notre fichier Capfile o&ugrave; nous allons d&eacute;clarer:</p>
<ul><li>Le niveau de trace</li>
<li>Le chemin binaire PHP</li>
<li>nos diff&eacute;rents environnements "staging"</li>
</ul><p><a href="https://github.com/20uf/deployment-with-capifony/blob/master/Capfile">Fichier Capfile</a></p>
<pre><code class="language-python">    load 'deploy' if respond_to?(:namespace)

    require 'capifony_symfony2'
    require 'capistrano-strategy-copy-with-triggers'

    logger.level = Logger::MAX_LEVEL

    # PHP binary path
    set :php_bin, "/usr/local/php5.6/bin/php"

    # Staging
    set :stages, %w(production staging testing)
    set :default_stage, "testing"
    set :stage_dir, "capifony/stages"
    require 'capistrano/ext/multistage'</code></pre>
<p>Cr&eacute;ons maintenant notre premier stage pour la production dans le dossier stages/
Je ne vais pas ici vous d&eacute;tailler les configurations, je vous invite &agrave; consulter <a href="http://capifony.org/">le site officiel</a>.</p>
<p><a href="https://github.com/20uf/deployment-with-capifony/blob/master/stages/production.rb">Fichier production.rb</a></p>
<pre><code class="language-python">    set :deploy_to, "/path/project/"

    set :branch, "master"
    set :symfony_env_prod, "prod"

    set :application, "demo-20uf"
    set :domain, "ssh.cluster.production.tld"
    set :user, "user-auth"

    set :use_sudo, false
    set :keep_releases, 2

    role :web, domain
    role :app, domain, :primary =&gt; true

    # Repository
    set :repository, "ssh://git@your.gitlab.tdl/project/demo.git"
    set :scm, :git
    set :deploy_via, :copy_with_triggers

    ## Symfony3 structure
    set :symfony_console, "bin/console"
    set :controllers_to_clear, ["app_*.php"]
    set :shared_files, ["app/config/parameters.yml"]
    set :use_composer, true
    set :composer_install_flags, '--no-dev --no-interaction --quiet --optimize-autoloader'
    set :composer_dump_autoload_flags, '--optimize'
    set :update_vendors, false
    set :copy_vendors, false
    set :writable_dirs, ["var/cache", "var/logs"]
    set :webserver_user, "www-data"
    set :use_set_permissions, true
    set :dump_assetic_assets, false
    set :model_manager, "doctrine" # ORM</code></pre>
<p>Il faut initialiser la structure/ l'arborescence c&ocirc;t&eacute; serveur, pour cela &agrave; partir de la racine o&ugrave; se trouve le capfile:</p>
<pre><code>cap deploy:setup</code></pre>
<p>Ajoutons maintenant le fichier de param&egrave;tre symfony sur le serveur:</p>
<pre><code>ssh your_deploy_server
mkdir -p /path/project/shared/app/config
vim /path/project/shared/app/config/parameters.yml</code></pre>
<p>Parfait, vous pouvez maintenant tester en ex&eacute;cutant le d&eacute;ploiement avec la commande:</p>
<pre><code>cap production deploy</code></pre>
<p>Ajoutez ces scripts dans un d&eacute;p&ocirc;t git, celui-ci sera utilis&eacute; dans la prochaine &eacute;tape.</p>
<h4 id="tache-jenkins">T&acirc;che Jenkins<a href="#tache-jenkins" class="anchor">#</a></h4>
<blockquote>
<p>Les plugins Git plugin ou GitLab Plugin, Branch API Plugin, Git Parameter Plug-In, Active Choices Plug-in est requis sur votre serveur Jenkins.</p>
</blockquote>
<p>Nous avons mis en place les scripts, test&eacute; en local, tout &ccedil;a c'est bien, mais allons plus loin en permettant &agrave; d'autre de d&eacute;ployer.</p>
<p>Cr&eacute;ons un nouveau Job jenkins free-style.</p>
<p>Cochez "Ce build a des parametres"
Ajouter pour nom "stage" et comme description "Staging"
Cochez "Types de param&egrave;tres de base" puis configurez en simple select avec un seul &eacute;l&eacute;ment visible.
Mettez comme valeur dans "Choisissez la source pour la valeur" vos environnement s&eacute;par&eacute; d'une virgule, par exemple: testing,staging,production
Mettez comme valeur dans "Choisissez Source pour la valeur par d&eacute;faut" l'environnement par d&eacute;faut, par exemple production.</p>
<p><img src="https://raw.githubusercontent.com/20uf/deployment-with-capifony/master/assets/build_parameters.png" alt="param&egrave;tres"></p>
<p>Dans la gestion de code source, s&eacute;lectionnez Git et ajouter le d&eacute;p&ocirc;t contenant les scripts pr&eacute;c&eacute;demment cr&eacute;er.
Pr&eacute;cisez la branche par d&eacute;faut.</p>
<p><img src="https://raw.githubusercontent.com/20uf/deployment-with-capifony/master/assets/build_gitlab.png" alt="param&egrave;tres"></p>
<p>Il reste &agrave; ajouter le script shell qui va ex&eacute;cuter capifony, selon le param&egrave;tre qui sera s&eacute;lectionn&eacute; par l'utilisateur.</p>
<p><a href="https://github.com/20uf/deployment-with-capifony/blob/master/jenkins_build.sh">Build jenkins</a></p>
<pre><code>    #!/bin/bash
    # Shell de deploiement

    # Close STDERR FD
    exec 2&lt;&amp;-
    # Redirect STDERR to STDOUT
    exec 2&gt;&amp;1

    MAGENTA="\033[0;35m"
    COLOREND="\e[0m"
    BLUE="\e[34m"
    GREEN="\e[32m"

    echo "-------------------------------------------------------------------------------------------------------------------------------------------"
    echo -e "$BLUE" "&gt;&gt;&gt; Task execution ${JOB_NAME} stage: ${stage}" "$COLOREND"
    echo "-------------------------------------------------------------------------------------------------------------------------------------------"

    cap ${stage} deploy

    echo "-------------------------------------------------------------------------------------------------------------------------------------------"
    echo -e "$BLUE" "End of deployment ${JOB_NAME} `date`" "$COLOREND"
    echo "-------------------------------------------------------------------------------------------------------------------------------------------"</code></pre>
<p>Sauvegardez et le tour est jou&eacute; !</p>
<h4 id="taches-utiles">T&acirc;ches utiles<a href="#taches-utiles" class="anchor">#</a></h4>
<h4 id="liens-externes">Liens externes:<a href="#liens-externes" class="anchor">#</a></h4>
<p><a href="http://capifony.org/">Capifony</a>
<a href="https://github.com/20uf/deployment-with-capifony">Scripts exemples</a>
<a href="https://jenkins.io/">Jenkins</a></p>]]></content>
    </entry>
        <entry>
        <title>Tester le client Guzzle dans les tests unitaires</title>
                <id>https://20uf.github.io/2016/07/18/Testing-Guzzle-client.html</id>
                <updated>2016-07-18T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2016/07/18/Testing-Guzzle-client.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="tester-le-client-guzzle-dans-les-tests-unitaires">Tester le client Guzzle dans les tests unitaires<a href="#tester-le-client-guzzle-dans-les-tests-unitaires" class="anchor">#</a></h2>
<p>Guzzle est un client HTTP qui envoie des requ&ecirc;tes HTTP &agrave; un serveur et re&ccedil;oit des r&eacute;ponses HTTP.</p>
<p>Il est possible depuis la version 6 de mocker les r&eacute;ponses, prenons pour contexte un client facebook.</p>
<p>J'utilise le framework <a href="http://phake.readthedocs.io/en/2.1/">Phake</a> en compl&eacute;ment de <a href="https://phpunit.de/">PHPUnit</a>.</p>
<pre><code class="language-php">
    // App/Client/FacebookClient.php
    namespace App\Client;

    use .. 

    /**
     * Class FacebookClient
     *
     * @author Michael COULLERET &lt;michael@coulleret.pro&gt;
     */
    class FacebookClient
    {
        ... 

        /**
         * {@inheritdoc}
         */
        public function getMessageFromUrl($url)
        {
            if (!preg_match('`^https?://www.facebook.com/([A-Za-z0-9]+)+/posts/([0-9]+)$`', $url, $match)) {
                throw new \Exception('Invalid URL facebook');
            }

            $facebookUser = $this-&gt;getUser($match[1]);
            $posts = $this-&gt;getPosts($match[1]);

            $messageId = sprintf('%s_%s', $facebookUser['id'], $match[2]);

            foreach ($posts['data'] as $post) {
                if ($post['id'] === $messageId) {
                    $post['name'] = $facebookUser['name'];
                    $post['avatar'] = sprintf('http://graph.facebook.com/%s/picture', $match[1]);

                    return $post;
                }
            }

            throw new NotFoundHttpException(sprintf('Message id %s do not found', $messageId));
        }

        ...
    }
</code></pre>
<p>L'objectif est de simuler les appels dans une file d'attente:</p>
<pre><code class="language-php">
    // tests/App/Client/FacebookClient.php
    namespace Tests\Client;

    /**
     * Class FacebookClientTest
     *
     * @author Michael COULLERET &lt;michael@coulleret.pro&gt;
     */
    class FacebookClientTest extends \PHPUnit_Framework_TestCase
    {
        /**
         * @test
         */
        public function shouldGetMessageFromUrl()
        {
            $guzzleMock = new MockHandler([
                new Response(200, [], $this-&gt;mockJsonOauth),
                new Response(200, [], $this-&gt;mockJsonUser),
                new Response(200, [], $this-&gt;mockJsonPosts),
            ]);

            $guzzleClient = new Client(['handler' =&gt; HandlerStack::create($guzzleMock)]);

            $clientFacebook = \Phake::partialMock(FacebookClient::class, $this-&gt;config, $guzzleClient, $this-&gt;logger);

            $result = $clientFacebook-&gt;getMessageFromUrl($this-&gt;mockUrl);

            $mockToArray = json_decode($this-&gt;mockJsonPosts, true);
            $mockVerify = $mockToArray['data'][2];
            $mockVerify['name'] = 'Barack Obama';
            $mockVerify['avatar'] = 'http://graph.facebook.com/barackobama/picture';

            $this-&gt;assertEquals($result, $mockVerify);
        }

        ...

    }</code></pre>
<p>La classe MockHandler() permet de cr&eacute;er une liste d'attente de r&eacute;ponse, dans notre contexte la premi&egrave;re r&eacute;ponse se charge de renvoyer l'access token de facebook, la seconde l'entit&eacute; utilisateur et la troisi&egrave;me une liste de posts de l'utilisateur.
Nous passons notre file d'attente au client Guzzle qui se comportera dans de vrais conditions, efficace pour avoir des tests int&egrave;gres.</p>
<p>Le tour est jou&eacute; !</p>
<p>Le code exemple est disponible &agrave; cette adresse : <a href="https://github.com/20uf/php-good-practice/tree/master/tests/guzzle">https://github.com/20uf/php-good-practice/tree/master/tests/guzzle</a></p>
<p>Documentation compl&egrave;te sur le site officiel: <a href="http://docs.guzzlephp.org/en/latest/testing.html">http://docs.guzzlephp.org/en/latest/testing.html</a></p>]]></content>
    </entry>
        <entry>
        <title>Git configuration et les alias</title>
                <id>https://20uf.github.io/2016/07/05/git-alias.html</id>
                <updated>2016-07-05T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2016/07/05/git-alias.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="git-configuration-et-les-alias">Git configuration et les alias<a href="#git-configuration-et-les-alias" class="anchor">#</a></h2>
<h4 id="configuration-requise">Configuration requise<a href="#configuration-requise" class="anchor">#</a></h4>
<p>Il existe deux param&egrave;tres de configuration qui sont n&eacute;cessaires avant toute utilisation de Git.</p>
<p>Configurer le nom de l&rsquo;utilisateur</p>
<pre><code>git config --global user.name "Pr&eacute;nom Nom"</code></pre>
<p>Configurer l&rsquo;e&shy;mail de l&rsquo;utilisateur</p>
<pre><code>git config --global user.email email@votre.domaine</code></pre>
<h4 id="les-parametres-configurables">Les param&egrave;tres configurables<a href="#les-parametres-configurables" class="anchor">#</a></h4>
<p>D&eacute;finir un &eacute;diteur de texte par d&eacute;faut, par exemple vim</p>
<pre><code>git config --global core.editor vim</code></pre>
<p>Supprimer automatiquement en local les branches qui sont &eacute;cras&eacute;es sur serveur le central:</p>
<pre><code>git config --global fetch.prune true</code></pre>
<h4 id="modele-de-commit">Mod&egrave;le de commit<a href="#modele-de-commit" class="anchor">#</a></h4>
<p>Ce param&egrave;tre permet de d&eacute;finir un fichier texte comme &eacute;tant le mod&egrave;le de vos commits. Ce texte sera
alors pr&eacute;rempli dans l&rsquo;&eacute;diteur de texte lorsque Git demandera le message de commit. Par exemple, cidessous
le contenu du fichier ~/gitRessources/templateCommit.txt :</p>
<pre><code>[#FEATURE_ID] Titre du commit (49 caract&egrave;res max)
#Explications compl&eacute;mentaires</code></pre>
<p>Il faut ensuite ajouter le fichier dans la configuration (global dans cet exemple) :</p>
<pre><code>git config --global commit.template ~/gitRessources/templateCommit.txt</code></pre>
<p>Les lignes d&eacute;butant par un di&egrave;se sont des commentaires, nous voila avec une bonne base commune &agrave; plusieurs d&eacute;veloppeurs.</p>
<h4 id="hashs-abreges">Hashs abr&eacute;g&eacute;s<a href="#hashs-abreges" class="anchor">#</a></h4>
<p>Chaque donn&eacute;e utilis&eacute;e par Git est identifi&eacute;e par une cha&icirc;ne hexad&eacute;cimale de 40 caract&egrave;res.
Il est possible d&rsquo;indiquer &agrave; Git de n&rsquo;afficher que les sept premiers caract&egrave;res de ces identifiants pour augmenter la lisibilit&eacute;.</p>
<pre><code>git config --global log.abbrevCommit true</code></pre>
<h4 id="les-alias">Les alias<a href="#les-alias" class="anchor">#</a></h4>
<pre><code>git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.unstage 'reset HEAD --'</code></pre>
<h4 id="ignore-global">Ignore global<a href="#ignore-global" class="anchor">#</a></h4>
<p>L&rsquo;option de configuration core.excludesfile permet de d&eacute;finir un fichier qui contiendra une liste des
fichiers &agrave; ignorer.</p>
<pre><code>git config --global core.excludesfile ~/.gitignore_global</code></pre>
<p>Un exemple pragmatique pour exclure les dossiers g&eacute;n&eacute;r&eacute;s par les IDE:</p>
<pre><code>/.idea
.buildpath
.project
.settings/
/nbproject</code></pre>
<p>Vous trouverez des scripts et exemples sur le d&eacute;p&ocirc;t suivant :</p>
<blockquote>
<p><a href="https://github.com/20uf/Tools-sh">https://github.com/20uf/Tools-sh</a></p>
</blockquote>]]></content>
    </entry>
        <entry>
        <title>Les simplicités de conception</title>
                <id>https://20uf.github.io/2016/06/11/design-principles.html</id>
                <updated>2016-06-11T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2016/06/11/design-principles.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="les-simplicites-de-conception">Les simplicit&eacute;s de conception<a href="#les-simplicites-de-conception" class="anchor">#</a></h2>
<p>Il est important en tant que d&eacute;veloppeur de conna&icirc;tre les designs patterns, ils sont la pour r&eacute;soudre les probl&egrave;mes r&eacute;currents de conception, cependant il est tout aussi primordiale de les utiliser avec parcimonie.
Pour cette raison je tiens &agrave; rappeler des principes de simplicit&eacute;s &agrave; ne pas oublier. </p>
<h3 id="dry-don-t-repeat-yourself">DRY (Don&rsquo;t repeat yourself)<a href="#dry-don-t-repeat-yourself" class="anchor">#</a></h3>
<p>Ne vous r&eacute;p&eacute;tez pas.
A mon sens la r&eacute;p&eacute;tition d&eacute;montre un probl&egrave;me de d&eacute;couplage ou de conception, en effet les &eacute;volutions deviennent complexes et le risque de bug est augment&eacute; consid&eacute;rablement.
Le respect du principe DRY doit permettre un code r&eacute;utilisable, facile &agrave; maintenir et testable.</p>
<h3 id="yagni-you-ain-t-gonna-need-it">YAGNI (You ain't gonna need it)<a href="#yagni-you-ain-t-gonna-need-it" class="anchor">#</a></h3>
<p>Vous n'en aurez pas besoin.
On peut &ecirc;tre dans des cas ou l'on souhaite anticip&eacute; une fonctionnalit&eacute;, on rentre alors une inflation qui peut &ecirc;tre contre-productif, difficile &agrave; maintenir ou bien on se retrouve avec du code mort.
Le principe YAGNI est de d&eacute;velopper uniquement la fonctionnalit&eacute; demand&eacute;e sans surplus.</p>
<h3 id="kiss-keep-it-simple-stupid">KISS (Keep it simple, stupid)<a href="#kiss-keep-it-simple-stupid" class="anchor">#</a></h3>
<p>Ne complique pas les choses. Ou garde &ccedil;a simple, idiot.
Ce principe est tr&egrave;s proche de celui de YAGNI, une fonctionnalit&eacute; ne n&eacute;cessite pas forcement une complexit&eacute; &eacute;lev&eacute;e, si par exemple l'utilisation d'un design pattern n'est pas requis pour le besoin, le principe KISS incite &agrave; &eacute;crire un code simple et stupide.</p>]]></content>
    </entry>
        <entry>
        <title>Se simplifier la vie avec vos clefs ssh</title>
                <id>https://20uf.github.io/2016/05/03/Organize-your-ssh-keys.html</id>
                <updated>2016-05-03T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2016/05/03/Organize-your-ssh-keys.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="organisez-vos-clefs-ssh">Organisez vos clefs ssh<a href="#organisez-vos-clefs-ssh" class="anchor">#</a></h2>
<h4 id="generer-une-cle-privee-et-une-cle-publique">G&eacute;n&eacute;rer une cl&eacute; priv&eacute;e et une cl&eacute; publique<a href="#generer-une-cle-privee-et-une-cle-publique" class="anchor">#</a></h4>
<p>Une cl&eacute; SSH vous permet d'&eacute;tablir une connexion s&eacute;curis&eacute;e entre votre ordinateur et un serveur.</p>
<p>Pour g&eacute;n&eacute;rer une nouvelle cl&eacute; SSH, utilisez la commande suivante:</p>
<pre><code>ssh-keygen -t rsa -C "votre@email.com"</code></pre>
<p>Cette commande vous demandera un emplacement et un nom pour stocker la paire de cl&eacute;s et un mot de passe.
Je conseille d'utiliser l'emplacement par defaut correspondant et de nommer votre cl&eacute; selon son utilit&eacute;, par exemple pour github </p>
<pre><code>~/.ssh/id_github</code></pre>
<p>Une seconde question vous demande un passphrase, il est fortement recommand&eacute; d'en utiliser un</p>
<pre><code>Enter passphrase (empty for no passphrase): **************</code></pre>
<p>Vous devriez avoir un retour de ce type:</p>
<pre><code>Your identification has been saved in /home/demo/.ssh/id_rsa.
Your public key has been saved in /home/demo/.ssh/id_rsa.pub.
The key fingerprint is:
4a:dd:0a:c6:35:4e:3f:ed:27:38:8c:74:44:4d:93:67 demo@a
The key's randomart image is:
+--[ RSA 2048]----+
|          .oo.   |
|         .  o.E  |
|        + .  o   |
|     . = = .     |
|      = S = .    |
|     o + = +     |
|      . o + o .  |
|           . o   |
|                 |
+-----------------+</code></pre>
<p>Votre cl&eacute; est maintenant g&eacute;n&eacute;r&eacute;e et pr&ecirc;te &agrave; defaut utilis&eacute;e.</p>
<p>Si vous souhaitez copier votre cl&eacute; sur un serveur distant, vous pouvez proc&eacute;der ainsi:</p>
<pre><code>cat ~/.ssh/id_rsa.pub | ssh user@host "mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt;  ~/.ssh/authorized_keys"</code></pre>
<p>Une fois que vous avez copi&eacute; vos cl&eacute;s SSH vers votre serveur, v&eacute;rifier que vous pouvez vous connecter avec les cl&eacute;s SSH:</p>
<pre><code>ssh user@host</code></pre>
<h4 id="configurer-ses-cles">Configurer ses cl&eacute;s<a href="#configurer-ses-cles" class="anchor">#</a></h4>
<p>Une astuce pour se simplifier la vie avec vos clefs ssh, creez un fichier dans la dossier .ssh :</p>
<pre><code>vim ~/.ssh/config</code></pre>
<p>Cr&eacute;ez une configuration differentes pour chaque serveurs ssh:</p>
<pre><code>Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa

Host gitlab.domain.fr
    HostName gitlab.domain.fr
    User git
    IdentityFile ~/.ssh/id_other_rsa</code></pre>
<p>Et le tour est jou&eacute; !</p>
<h4 id="quelques-options">Quelques options:<a href="#quelques-options" class="anchor">#</a></h4>
<table><thead><tr><th style="text-align: left;">Commande</th>
<th style="text-align: center;">Param&egrave;tre</th>
<th style="text-align: right;">Description</th>
</tr></thead><tbody><tr><td style="text-align: left;"><code>hote</code></td>
<td style="text-align: center;">hostname/ip</td>
<td style="text-align: right;">adresse de la machine</td>
</tr><tr><td style="text-align: left;"><code>RSAAuthentication</code></td>
<td style="text-align: center;">yes/no</td>
<td style="text-align: right;">authentification RSA, cl&eacute; publique/priv&eacute; g&eacute;n&eacute;r&eacute; avec "ssh-keygen"</td>
</tr><tr><td style="text-align: left;"><code>PubKeyAuthentication</code></td>
<td style="text-align: center;">yes/no</td>
<td style="text-align: right;">s'authentifier avec une cl&eacute; public</td>
</tr><tr><td style="text-align: left;"><code>PasswordAuthentication</code></td>
<td style="text-align: center;">yes/no</td>
<td style="text-align: right;">authentification avec mot de passe (a pas confondre avec passphrase)</td>
</tr><tr><td style="text-align: left;"><code>CheckHostIP</code></td>
<td style="text-align: center;">yes/no</td>
<td style="text-align: right;">Verifie l'IP host n'est pas une usurpation DNS</td>
</tr><tr><td style="text-align: left;"><code>IdentityFile</code></td>
<td style="text-align: center;">~/.ssh/id_dsa</td>
<td style="text-align: right;">d&eacute;fini la cl&eacute; priv&eacute; a utiliser pour s'authentifier</td>
</tr><tr><td style="text-align: left;"><code>User</code></td>
<td style="text-align: center;">user</td>
<td style="text-align: right;">compte &agrave; utiliser pour l'identification</td>
</tr><tr><td style="text-align: left;"><code>Port</code></td>
<td style="text-align: center;">port</td>
<td style="text-align: right;">num&eacute;ro de port &agrave; utiliser</td>
</tr><tr><td style="text-align: left;"><code>HashKnownHosts</code></td>
<td style="text-align: center;">yes/no</td>
<td style="text-align: right;">Permet d'avoir un fichier known_hosts plus lisible</td>
</tr></tbody></table><h4 id="securite-sur-votre-serveur-ssh">S&eacute;curit&eacute; sur votre serveur SSH<a href="#securite-sur-votre-serveur-ssh" class="anchor">#</a></h4>
<p>Le login root ne doit pas &ecirc;tre autoris&eacute;e par l'interm&eacute;diaire des cl&eacute;s SSH.</p>
<p>Pour ce faire, ouvrez le fichier SSH config sur votre serveur distant:</p>
<pre><code>vim /etc/ssh/sshd_config</code></pre>
<p>Dans ce fichier, trouvez la ligne qui comprend PermitRootLogin et modifiez le pour garantir que seuls les utilisateurs peuvent se connecter avec leur cl&eacute; SSH:
PermitRootLogin sans mot de passe</p>
<pre><code>PermitRootLogin without-password</code></pre>
<p>Mettez les changements en vigueur:</p>
<pre><code>reload ssh</code></pre>]]></content>
    </entry>
        <entry>
        <title>Le coding standard Symfony2 avec CodeSniffer et PHPStorm</title>
                <id>https://20uf.github.io/2016/04/21/Coding-standard-phpstorm.html</id>
                <updated>2016-04-21T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2016/04/21/Coding-standard-phpstorm.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="un-point-important-concernant-la-qualite-de-code">Un point important concernant la qualit&eacute; de code<a href="#un-point-important-concernant-la-qualite-de-code" class="anchor">#</a></h2>
<p>Pour s'assurer de la normalisation des projets, l'installation d'outil comme PHP <a href="http://pear.php.net/package/PHP_CodeSniffer">PHP_CodeSniffer</a> facilite le respect des conventions de codage.</p>
<pre><code>sudo pear install PHP_CodeSniffer</code></pre>
<p>CodeSniffer inclut 8 standards par defaut: PSR2, Squiz, Zend, MySource, PHPCS, PSR1 and PEAR.
Nous allons ajouter le standard de Symfony2.</p>
<pre><code>git clone git://github.com/escapestudios/Symfony2-coding-standard.git /tmp/Symfony2-coding-standard
sudo cp -r /tmp/Symfony2-coding-standard/Symfony2 /usr/share/php/PHP/CodeSniffer/Standards/</code></pre>
<p>Le standart doit maintenant exister dans la liste:</p>
<pre><code>phpcs -i</code></pre>
<p>Nous pouvons en d&eacute;finir un par d&eacute;faut:</p>
<pre><code>sudo phpcs --config-set default_standard Symfony2</code></pre>
<p>Pour l'utiliser il suffit &agrave; de se rendre dans un de nos projets Symfony2 et de taper la commande suivante :</p>
<pre><code>phpcs src/</code></pre>
<h2 id="configuration-dans-phpstorm">Configuration dans PHPStorm<a href="#configuration-dans-phpstorm" class="anchor">#</a></h2>
<p>Allez dans File &gt; Settings &gt; Languages &amp; Frameworks &gt; PHP &gt; Code Sniffer  </p>
<p>Indiquez dans l'executable phpcs puis validez !</p>
<p><img src="/img/1_phpstorm_codesniffer.png" alt="CodeSniffer"></p>
<p>Dernier point &agrave; finaliser, l'inspection:
File &gt; Settings &gt; Editor &gt; Code Style &gt; Inspections &gt; PHP &gt; PHP Code Sniffer validation</p>
<p>Activez le et mettez la s&eacute;v&eacute;rit&eacute; forte.</p>
<p><img src="/img/2_phpstorm_setting_inspections.png" alt="Inspection"></p>]]></content>
    </entry>
        <entry>
        <title>Les outils indispensables d&#039;un développeur</title>
                <id>https://20uf.github.io/2015/12/12/developer-tools.html</id>
                <updated>2015-12-12T00:00:00+01:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2015/12/12/developer-tools.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="quels-sont-les-outils-indispensables-d-un-developpeur">Quels sont les outils indispensables d'un d&eacute;veloppeur<a href="#quels-sont-les-outils-indispensables-d-un-developpeur" class="anchor">#</a></h2>
<p>En tant que d&eacute;veloppeur, on doit s'assurer de disposer sur son poste de travail des outils suivants :</p>
<ul><li>
<p>PHP</p>
<ul><li><a href="https://getcomposer.org/">Composer</a> pour g&eacute;rer les d&eacute;pendances</li>
<li><a href="http://www.phpunit.de">PHPUnit</a> pour &eacute;crire des tests unitaires</li>
<li><a href="http://phake.readthedocs.io/en/latest/">Phake</a> un framework compl&eacute;mentaire pour mocker simplement et facilement</li>
<li><a href="http://www.behat.org">Behat</a> pour &eacute;crire des tests fonctionnels</li>
<li><a href="http://www.phpmetrics.org">PhpMetrics</a> pour v&eacute;rifier la qualit&eacute; du code</li>
<li><a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP Code Sniffer</a> pour regarder le respect des conventions de code</li>
</ul></li>
<li>
<p>JavaScript</p>
<ul><li><a href="http://jasmine.github.io">Jasmine</a> pour &eacute;crire mes tests fonctionnels en JS</li>
<li><a href="https://github.com/es-analysis/plato">Plato</a> pour v&eacute;rifier la qualit&eacute; du code</li>
<li><a href="http://www.jslint.com/">JSLint</a> pour regarder le respect des conventions de code</li>
<li><a href="https://nodejs.org/">NodeJs</a> est une plateforme de d&eacute;veloppement Javascript</li>
<li><a href="http://bower.io/">Bower</a> pour g&eacute;rer les librairies</li>
<li><a href="http://gruntjs.com/">GruntJs</a> est un gestionnaire de t&acirc;ches (automatisation)</li>
</ul></li>
<li>Css
<ul><li><a href="http://sass-lang.com/">Sass</a> est un pr&eacute;processeur css</li>
<li><a href="http://compass-style.org/">Compass</a> est un framework css</li>
</ul></li>
</ul><p>Les incontournables:</p>
<ul><li><a href="https://symfony.com/">Symfony</a> est un ensemble de composant formant un framework PHP</li>
<li><a href="http://yeoman.io/">Yeoman</a> est un composant qui va ex&eacute;cuter des g&eacute;n&eacute;rateurs</li>
</ul>]]></content>
    </entry>
        <entry>
        <title>installer PHP 7 pour apache avec les dépôts dotdeb</title>
                <id>https://20uf.github.io/2015/06/20/debian-install-PHP7.html</id>
                <updated>2015-06-20T00:00:00+02:00</updated>
        <author>
            <name>Michael COULLERET aka 20uf</name>
            <email>michael@coulleret.pro</email>
        </author>
        <link rel="alternate" type="text/html" href="https://20uf.github.io/2015/06/20/debian-install-PHP7.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 id="installer-php-7-pour-apache-avec-les-depots-dotdeb">installer PHP 7 pour apache avec les d&eacute;p&ocirc;ts dotdeb <a href="#installer-php-7-pour-apache-avec-les-depots-dotdeb" class="anchor">#</a></h2>
<p>Ajouter les d&eacute;pots dotdeb:</p>
<pre><code> echo "deb http://packages.dotdeb.org jessie all" &gt; /etc/apt/sources.list.d/dotdeb.list
 wget https://www.dotdeb.org/dotdeb.gpg &amp;&amp; apt-key add dotdeb.gpg</code></pre>
<p>Ou </p>
<pre><code>apt-get install python-software-properties &amp;&amp; LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php</code></pre>
<p>Mettre &agrave; jour les d&eacute;pots</p>
<pre><code> apt-get update &amp;&amp; apt-get upgrade</code></pre>
<p>V&eacute;rification de la pr&eacute;sence de php7: </p>
<pre><code>apt-cache policy php7.0</code></pre>
<p>Si vous migrez &agrave; partir de php5, nettoyez les paquets:</p>
<pre><code>apt-get --purge remove php5* &amp;&amp; apt-get autoremove</code></pre>
<p>On installe PHP7 &amp; FPM</p>
<pre><code>apt install php7.0 php7.0-fpm</code></pre>
<p>On contr&ocirc;le la version:</p>
<pre><code>php -v

&gt; PHP 7.0.7-4+deb.sury.org~trusty+1 (cli) ( NTS )
&gt; Copyright (c) 1997-2016 The PHP Group
&gt; Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies
&gt; with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies</code></pre>
<p>Configuration</p>
<h5 id=""><a href="#" class="anchor">#</a></h5>
<p>On modifie le php.ini:</p>
<pre><code>vim /etc/php/7.0/fpm/php.ini</code></pre>
<p>Ligne 768:</p>
<pre><code>cgi.fix_pathinfo=0</code></pre>
<p>Ligne 798:</p>
<pre><code>upload_max_filesize = 32M</code></pre>
<p>Ligne 656:</p>
<pre><code>post_max_size = 32M</code></pre>
<p>Ligne 912:</p>
<pre><code>date.timezone = Europe/Paris</code></pre>
<p>Ligne 1306:</p>
<pre><code>session.save_path = "/tmp"</code></pre>
<p>On modifie www.conf</p>
<pre><code>vim /etc/php/7.0/fpm/pool.d/www.conf</code></pre>
<p>Ligne 37</p>
<pre><code>listen = /run/php/php7.0-fpm.sock</code></pre>
<p>par:</p>
<pre><code>listen = 127.0.0.1:9000</code></pre>
<p>On installe les modules suppl&eacute;mentaire:</p>
<pre><code>apt-get install php7.0-cli php7.0-mysql php7.0-common php7.0-curl php7.0-opcache php7.0-json php-xml php-xdebug php7.0-mbstring libapache2-mod-php7.0 php7.0-dev php7.0-mcrypt php7.0-memcache php7.0-readline php7.0-tidy</code></pre>
<p>On relance les services:</p>
<pre><code>service apache2 restart &amp;&amp; service php7.0-fpm restart</code></pre>]]></content>
    </entry>
    </feed>
